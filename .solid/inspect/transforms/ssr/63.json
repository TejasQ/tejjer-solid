{
  "id": "/Users/tejas/Sites/LAB/tejjer/node_modules/.pnpm/solid-start@0.2.6_i2cnpwj3ojjdnkycik5yjsstli/node_modules/solid-start/session/cookieSigning.ts",
  "deps": [],
  "plugins": [
    "vite:load-fallback",
    "vite:esbuild"
  ],
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*!\n * Original code by Remix Sofware Inc\n * MIT Licensed, Copyright(c) 2021 Remix software Inc, see LICENSE.remix.md for details\n * \n * Credits to the Remix team:\n * https://github.com/remix-run/remix/blob/main/packages/remix-server-runtime/cookieSigning.ts\n */\n\nexport type InternalSignFunctionDoNotUseMe = (value: string, secret: string) => Promise<string>;\n\nexport type InternalUnsignFunctionDoNotUseMe = (\n  cookie: string,\n  secret: string\n) => Promise<string | false>;\n\nconst encoder = /*#__PURE__*/new TextEncoder();\n\nexport const sign: InternalSignFunctionDoNotUseMe = async (value, secret) => {\n  let key = await createKey(secret, [\"sign\"]);\n  let data = encoder.encode(value);\n  let signature = await crypto.subtle.sign(\"HMAC\", key, data);\n  let hash = btoa(String.fromCharCode(...new Uint8Array(signature))).replace(/=+$/, \"\");\n\n  return value + \".\" + hash;\n};\n\nexport const unsign: InternalUnsignFunctionDoNotUseMe = async (signed, secret) => {\n  let index = signed.lastIndexOf(\".\");\n  let value = signed.slice(0, index);\n  let hash = signed.slice(index + 1);\n\n  let key = await createKey(secret, [\"verify\"]);\n  let data = encoder.encode(value);\n  let signature = byteStringToUint8Array(atob(hash));\n  let valid = await crypto.subtle.verify(\"HMAC\", key, signature, data);\n\n  return valid ? value : false;\n};\n\nasync function createKey(secret: string, usages: CryptoKey[\"usages\"]): Promise<CryptoKey> {\n  let key = await crypto.subtle.importKey(\n    \"raw\",\n    encoder.encode(secret),\n    { name: \"HMAC\", hash: \"SHA-256\" },\n    false,\n    usages\n  );\n\n  return key;\n}\n\nfunction byteStringToUint8Array(byteString: string): Uint8Array {\n  let array = new Uint8Array(byteString.length);\n\n  for (let i = 0; i < byteString.length; i++) {\n    array[i] = byteString.charCodeAt(i);\n  }\n\n  return array;\n}\n\n// export async function sign(value: string, secret: string): Promise<string> {\n//     const ec = new TextEncoder();\n//     const signature =\n//       await crypto.subtle.sign('RSASSA-PKCS1-v1_5', secret, ec.encode(value));\n//     return new TextDecoder().decode(signature);\n//   }\n\n//   async function verify(key, signature, data) {\n//     const ec = new TextEncoder();\n//     const verified =\n//       await subtle.verify(\n//         'RSASSA-PKCS1-v1_5',\n//         key,\n//         signature,\n//         ec.encode(data));\n//     return verified;\n//   }\n// }\n\n// export async function unsign(value: string, secret: string): Promise<string | false> {\n//   return cookie.unsign(value, secret);\n// }\n",
      "start": 1669937513974,
      "end": 1669937514073
    },
    {
      "name": "vite:esbuild",
      "result": "/*!\n * Original code by Remix Sofware Inc\n * MIT Licensed, Copyright(c) 2021 Remix software Inc, see LICENSE.remix.md for details\n * \n * Credits to the Remix team:\n * https://github.com/remix-run/remix/blob/main/packages/remix-server-runtime/cookieSigning.ts\n */\nconst encoder = /* @__PURE__ */ new TextEncoder();\nexport const sign = async (value, secret) => {\n  let key = await createKey(secret, [\"sign\"]);\n  let data = encoder.encode(value);\n  let signature = await crypto.subtle.sign(\"HMAC\", key, data);\n  let hash = btoa(String.fromCharCode(...new Uint8Array(signature))).replace(/=+$/, \"\");\n  return value + \".\" + hash;\n};\nexport const unsign = async (signed, secret) => {\n  let index = signed.lastIndexOf(\".\");\n  let value = signed.slice(0, index);\n  let hash = signed.slice(index + 1);\n  let key = await createKey(secret, [\"verify\"]);\n  let data = encoder.encode(value);\n  let signature = byteStringToUint8Array(atob(hash));\n  let valid = await crypto.subtle.verify(\"HMAC\", key, signature, data);\n  return valid ? value : false;\n};\nasync function createKey(secret, usages) {\n  let key = await crypto.subtle.importKey(\n    \"raw\",\n    encoder.encode(secret),\n    { name: \"HMAC\", hash: \"SHA-256\" },\n    false,\n    usages\n  );\n  return key;\n}\nfunction byteStringToUint8Array(byteString) {\n  let array = new Uint8Array(byteString.length);\n  for (let i = 0; i < byteString.length; i++) {\n    array[i] = byteString.charCodeAt(i);\n  }\n  return array;\n}\n",
      "start": 1669937514073,
      "end": 1669937514097
    }
  ],
  "virtual": false
}