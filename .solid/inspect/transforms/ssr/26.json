{
  "id": "/Users/tejas/Sites/LAB/tejjer/node_modules/.pnpm/solid-start@0.2.6_i2cnpwj3ojjdnkycik5yjsstli/node_modules/solid-start/api/index.ts",
  "deps": [],
  "plugins": [
    "vite:load-fallback",
    "solid-start-file-system-router",
    "vite:esbuild"
  ],
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { registerApiRoutes } from \"./internalFetch\";\nimport { getRouteMatches } from \"./router\";\nimport { MatchRoute, Method, Route } from \"./types\";\n\n// the line below will be replaced by the compiler with a configuration of routes\n// based on the files in src/routes\n// we have to declare this with `var` so that we can find it even if vite precompiles the code\n// @ts-ignore\nvar api = $API_ROUTES;\n\n// `delete` is a reserved word in JS, so we use `del` instead\n\nfunction routeToMatchRoute(route: Route): MatchRoute {\n  const segments = route.path.split(\"/\").filter(Boolean);\n\n  const params: { type: \"*\" | \":\"; name: string; index: number }[] = [];\n  const matchSegments: (string | null)[] = [];\n  let score = route.path.endsWith(\"/\") ? 4 : 0;\n  let wildcard = false;\n\n  for (const [index, segment] of segments.entries()) {\n    if (segment[0] === \":\") {\n      const name = segment.slice(1);\n      score += 3;\n      params.push({\n        type: \":\",\n        name,\n        index\n      });\n      matchSegments.push(null);\n    } else if (segment[0] === \"*\") {\n      params.push({\n        type: \"*\",\n        name: segment.slice(1),\n        index\n      });\n      wildcard = true;\n    } else {\n      score += 4;\n      matchSegments.push(segment);\n    }\n  }\n\n  return {\n    ...route,\n    score,\n    params,\n    matchSegments,\n    wildcard\n  };\n}\n\nconst allRoutes = (api as Route[]).map(routeToMatchRoute).sort((a, b) => b.score - a.score);\n\nregisterApiRoutes(allRoutes);\n\nexport function getApiHandler(url: URL, method: string) {\n  return getRouteMatches(allRoutes, url.pathname, method.toUpperCase() as Method);\n}\n\nexport function isApiRequest(request: Request) {\n  let apiHandler = getApiHandler(new URL(request.url), request.method);\n  return Boolean(apiHandler);\n}\n\nexport * from \"../server/responses\";\nexport type { APIEvent } from \"./types\";\n",
      "start": 1669937513942,
      "end": 1669937513976
    },
    {
      "name": "solid-start-file-system-router",
      "result": "import { registerApiRoutes } from \"./internalFetch\";\nimport { getRouteMatches } from \"./router\";\nimport { MatchRoute, Method, Route } from \"./types\";\n\n// the line below will be replaced by the compiler with a configuration of routes\n// based on the files in src/routes\n// we have to declare this with `var` so that we can find it even if vite precompiles the code\n// @ts-ignore\n\n  import  { POST as routeData0 } from '/Users/tejas/Sites/LAB/tejjer/apps/solid/src/routes/api/tweet.ts';\nimport  { GET as routeData1 } from '/Users/tejas/Sites/LAB/tejjer/apps/solid/src/routes/api/auth/twitter/callback.ts';\n  const api = [\n{\nGET: \"skip\",\n path: \"/\" \n},\n{\nPOST: routeData0,\n path: \"/api/tweet\" \n},\n{\nGET: routeData1,\n path: \"/api/auth/twitter/callback\" \n}\n];\n\n// `delete` is a reserved word in JS, so we use `del` instead\n\nfunction routeToMatchRoute(route: Route): MatchRoute {\n  const segments = route.path.split(\"/\").filter(Boolean);\n\n  const params: { type: \"*\" | \":\"; name: string; index: number }[] = [];\n  const matchSegments: (string | null)[] = [];\n  let score = route.path.endsWith(\"/\") ? 4 : 0;\n  let wildcard = false;\n\n  for (const [index, segment] of segments.entries()) {\n    if (segment[0] === \":\") {\n      const name = segment.slice(1);\n      score += 3;\n      params.push({\n        type: \":\",\n        name,\n        index\n      });\n      matchSegments.push(null);\n    } else if (segment[0] === \"*\") {\n      params.push({\n        type: \"*\",\n        name: segment.slice(1),\n        index\n      });\n      wildcard = true;\n    } else {\n      score += 4;\n      matchSegments.push(segment);\n    }\n  }\n\n  return {\n    ...route,\n    score,\n    params,\n    matchSegments,\n    wildcard\n  };\n}\n\nconst allRoutes = (api as Route[]).map(routeToMatchRoute).sort((a, b) => b.score - a.score);\n\nregisterApiRoutes(allRoutes);\n\nexport function getApiHandler(url: URL, method: string) {\n  return getRouteMatches(allRoutes, url.pathname, method.toUpperCase() as Method);\n}\n\nexport function isApiRequest(request: Request) {\n  let apiHandler = getApiHandler(new URL(request.url), request.method);\n  return Boolean(apiHandler);\n}\n\nexport * from \"../server/responses\";\nexport type { APIEvent } from \"./types\";\n",
      "start": 1669937513976,
      "end": 1669937513976
    },
    {
      "name": "vite:esbuild",
      "result": "import { registerApiRoutes } from \"./internalFetch\";\nimport { getRouteMatches } from \"./router\";\nimport { POST as routeData0 } from \"/Users/tejas/Sites/LAB/tejjer/apps/solid/src/routes/api/tweet.ts\";\nimport { GET as routeData1 } from \"/Users/tejas/Sites/LAB/tejjer/apps/solid/src/routes/api/auth/twitter/callback.ts\";\nconst api = [\n  {\n    GET: \"skip\",\n    path: \"/\"\n  },\n  {\n    POST: routeData0,\n    path: \"/api/tweet\"\n  },\n  {\n    GET: routeData1,\n    path: \"/api/auth/twitter/callback\"\n  }\n];\nfunction routeToMatchRoute(route) {\n  const segments = route.path.split(\"/\").filter(Boolean);\n  const params = [];\n  const matchSegments = [];\n  let score = route.path.endsWith(\"/\") ? 4 : 0;\n  let wildcard = false;\n  for (const [index, segment] of segments.entries()) {\n    if (segment[0] === \":\") {\n      const name = segment.slice(1);\n      score += 3;\n      params.push({\n        type: \":\",\n        name,\n        index\n      });\n      matchSegments.push(null);\n    } else if (segment[0] === \"*\") {\n      params.push({\n        type: \"*\",\n        name: segment.slice(1),\n        index\n      });\n      wildcard = true;\n    } else {\n      score += 4;\n      matchSegments.push(segment);\n    }\n  }\n  return {\n    ...route,\n    score,\n    params,\n    matchSegments,\n    wildcard\n  };\n}\nconst allRoutes = api.map(routeToMatchRoute).sort((a, b) => b.score - a.score);\nregisterApiRoutes(allRoutes);\nexport function getApiHandler(url, method) {\n  return getRouteMatches(allRoutes, url.pathname, method.toUpperCase());\n}\nexport function isApiRequest(request) {\n  let apiHandler = getApiHandler(new URL(request.url), request.method);\n  return Boolean(apiHandler);\n}\nexport * from \"../server/responses\";\n",
      "start": 1669937513976,
      "end": 1669937513978
    }
  ],
  "virtual": false
}