{
  "id": "/Users/tejas/Sites/LAB/tejjer/node_modules/.pnpm/solid-start@0.2.6_i2cnpwj3ojjdnkycik5yjsstli/node_modules/solid-start/entry-server/StartServer.tsx",
  "deps": [],
  "plugins": [
    "vite:load-fallback",
    "solid",
    "vite:define",
    "vite:import-glob"
  ],
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { MetaProvider } from \"@solidjs/meta\";\nimport { RouteDataFunc, Router, RouterProps } from \"@solidjs/router\";\nimport { ComponentProps, sharedConfig } from \"solid-js\";\nimport { ssr } from \"solid-js/web\";\nimport Root from \"~start/root\";\nimport { apiRoutes } from \"../api/middleware\";\nimport { RouteDefinition, Router as IslandsRouter } from \"../islands/server-router\";\nimport { fileRoutes } from \"../root/FileRoutes\";\nimport { inlineServerFunctions } from \"../server/middleware\";\nimport { ServerContext } from \"../server/ServerContext\";\nimport { FetchEvent, PageEvent } from \"../server/types\";\n\nconst rootData = Object.values(import.meta.glob(\"/src/root.data.(js|ts)\", { eager: true }))[0] as {\n  default: RouteDataFunc;\n};\nconst dataFn: RouteDataFunc | undefined = rootData ? rootData.default : undefined;\n\n/** Function responsible for listening for streamed [operations]{@link Operation}. */\nexport type Middleware = (input: MiddlewareInput) => MiddlewareFn;\n\n/** Input parameters for to an Exchange factory function. */\nexport interface MiddlewareInput {\n  forward: MiddlewareFn;\n}\n\n/** Function responsible for receiving an observable [operation]{@link Operation} and returning a [result]{@link OperationResult}. */\nexport type MiddlewareFn = (event: FetchEvent) => Promise<Response> | Response;\n\n/** This composes an array of Exchanges into a single ExchangeIO function */\nexport const composeMiddleware =\n  (exchanges: Middleware[]) =>\n  ({ forward }: MiddlewareInput) =>\n    exchanges.reduceRight(\n      (forward, exchange) =>\n        exchange({\n          forward\n        }),\n      forward\n    );\n\nexport function createHandler(...exchanges: Middleware[]) {\n  const exchange = composeMiddleware([apiRoutes, inlineServerFunctions, ...exchanges]);\n  return async (event: FetchEvent) => {\n    return await exchange({\n      forward: async op => {\n        return new Response(null, {\n          status: 404\n        });\n      }\n    })(event);\n  };\n}\n\nexport function StartRouter(\n  props: RouterProps & {\n    location: string;\n    prevLocation: string;\n    routes: RouteDefinition | RouteDefinition[];\n  }\n) {\n  if (import.meta.env.START_ISLANDS_ROUTER) {\n    return (\n      <Router {...props}>\n        <IslandsRouter {...props}>{props.children}</IslandsRouter>\n      </Router>\n    );\n  }\n  return <Router {...props}></Router>;\n}\n\nconst docType = ssr(\"<!DOCTYPE html>\");\nexport default function StartServer({ event }: { event: PageEvent }) {\n  const parsed = new URL(event.request.url);\n  const path = parsed.pathname + parsed.search;\n\n  // @ts-ignore\n  sharedConfig.context.requestContext = event;\n  return (\n    <ServerContext.Provider value={event}>\n      <MetaProvider tags={event.tags as ComponentProps<typeof MetaProvider>[\"tags\"]}>\n        <StartRouter\n          url={path}\n          out={event.routerContext}\n          location={path}\n          prevLocation={event.prevUrl}\n          data={dataFn}\n          routes={fileRoutes}\n        >\n          {docType as unknown as any}\n          <Root />\n        </StartRouter>\n      </MetaProvider>\n    </ServerContext.Provider>\n  );\n}\n",
      "start": 1669937513799,
      "end": 1669937513800
    },
    {
      "name": "solid",
      "result": "import { createComponent as _$createComponent } from \"solid-js/web\";\nimport { mergeProps as _$mergeProps } from \"solid-js/web\";\nimport { MetaProvider } from \"@solidjs/meta\";\nimport { Router } from \"@solidjs/router\";\nimport { sharedConfig } from \"solid-js\";\nimport { ssr } from \"solid-js/web\";\nimport Root from \"~start/root\";\nimport { apiRoutes } from \"../api/middleware\";\nimport { Router as IslandsRouter } from \"../islands/server-router\";\nimport { fileRoutes } from \"../root/FileRoutes\";\nimport { inlineServerFunctions } from \"../server/middleware\";\nimport { ServerContext } from \"../server/ServerContext\";\nconst rootData = Object.values(import.meta.glob(\"/src/root.data.(js|ts)\", {\n  eager: true\n}))[0];\nconst dataFn = rootData ? rootData.default : undefined;\n\n/** Function responsible for listening for streamed [operations]{@link Operation}. */\n\n/** This composes an array of Exchanges into a single ExchangeIO function */\nexport const composeMiddleware = exchanges => ({\n  forward\n}) => exchanges.reduceRight((forward, exchange) => exchange({\n  forward\n}), forward);\nexport function createHandler(...exchanges) {\n  const exchange = composeMiddleware([apiRoutes, inlineServerFunctions, ...exchanges]);\n  return async event => {\n    return await exchange({\n      forward: async op => {\n        return new Response(null, {\n          status: 404\n        });\n      }\n    })(event);\n  };\n}\nexport function StartRouter(props) {\n  if (import.meta.env.START_ISLANDS_ROUTER) {\n    return _$createComponent(Router, _$mergeProps(props, {\n      get children() {\n        return _$createComponent(IslandsRouter, _$mergeProps(props, {\n          get children() {\n            return props.children;\n          }\n        }));\n      }\n    }));\n  }\n  return _$createComponent(Router, props);\n}\nconst docType = ssr(\"<!DOCTYPE html>\");\nexport default function StartServer({\n  event\n}) {\n  const parsed = new URL(event.request.url);\n  const path = parsed.pathname + parsed.search;\n\n  // @ts-ignore\n  sharedConfig.context.requestContext = event;\n  return _$createComponent(ServerContext.Provider, {\n    value: event,\n    get children() {\n      return _$createComponent(MetaProvider, {\n        get tags() {\n          return event.tags;\n        },\n        get children() {\n          return _$createComponent(StartRouter, {\n            url: path,\n            get out() {\n              return event.routerContext;\n            },\n            location: path,\n            get prevLocation() {\n              return event.prevUrl;\n            },\n            data: dataFn,\n            routes: fileRoutes,\n            get children() {\n              return [docType, _$createComponent(Root, {})];\n            }\n          });\n        }\n      });\n    }\n  });\n}",
      "start": 1669937513800,
      "end": 1669937513805
    },
    {
      "name": "vite:define",
      "result": "import { createComponent as _$createComponent } from \"solid-js/web\";\nimport { mergeProps as _$mergeProps } from \"solid-js/web\";\nimport { MetaProvider } from \"@solidjs/meta\";\nimport { Router } from \"@solidjs/router\";\nimport { sharedConfig } from \"solid-js\";\nimport { ssr } from \"solid-js/web\";\nimport Root from \"~start/root\";\nimport { apiRoutes } from \"../api/middleware\";\nimport { Router as IslandsRouter } from \"../islands/server-router\";\nimport { fileRoutes } from \"../root/FileRoutes\";\nimport { inlineServerFunctions } from \"../server/middleware\";\nimport { ServerContext } from \"../server/ServerContext\";\nconst rootData = Object.values(import.meta.glob(\"/src/root.data.(js|ts)\", {\n  eager: true\n}))[0];\nconst dataFn = rootData ? rootData.default : undefined;\n\n/** Function responsible for listening for streamed [operations]{@link Operation}. */\n\n/** This composes an array of Exchanges into a single ExchangeIO function */\nexport const composeMiddleware = exchanges => ({\n  forward\n}) => exchanges.reduceRight((forward, exchange) => exchange({\n  forward\n}), forward);\nexport function createHandler(...exchanges) {\n  const exchange = composeMiddleware([apiRoutes, inlineServerFunctions, ...exchanges]);\n  return async event => {\n    return await exchange({\n      forward: async op => {\n        return new Response(null, {\n          status: 404\n        });\n      }\n    })(event);\n  };\n}\nexport function StartRouter(props) {\n  if (false) {\n    return _$createComponent(Router, _$mergeProps(props, {\n      get children() {\n        return _$createComponent(IslandsRouter, _$mergeProps(props, {\n          get children() {\n            return props.children;\n          }\n        }));\n      }\n    }));\n  }\n  return _$createComponent(Router, props);\n}\nconst docType = ssr(\"<!DOCTYPE html>\");\nexport default function StartServer({\n  event\n}) {\n  const parsed = new URL(event.request.url);\n  const path = parsed.pathname + parsed.search;\n\n  // @ts-ignore\n  sharedConfig.context.requestContext = event;\n  return _$createComponent(ServerContext.Provider, {\n    value: event,\n    get children() {\n      return _$createComponent(MetaProvider, {\n        get tags() {\n          return event.tags;\n        },\n        get children() {\n          return _$createComponent(StartRouter, {\n            url: path,\n            get out() {\n              return event.routerContext;\n            },\n            location: path,\n            get prevLocation() {\n              return event.prevUrl;\n            },\n            data: dataFn,\n            routes: fileRoutes,\n            get children() {\n              return [docType, _$createComponent(Root, {})];\n            }\n          });\n        }\n      });\n    }\n  });\n}",
      "start": 1669937513805,
      "end": 1669937513805
    },
    {
      "name": "vite:import-glob",
      "result": "import { createComponent as _$createComponent } from \"solid-js/web\";\nimport { mergeProps as _$mergeProps } from \"solid-js/web\";\nimport { MetaProvider } from \"@solidjs/meta\";\nimport { Router } from \"@solidjs/router\";\nimport { sharedConfig } from \"solid-js\";\nimport { ssr } from \"solid-js/web\";\nimport Root from \"~start/root\";\nimport { apiRoutes } from \"../api/middleware\";\nimport { Router as IslandsRouter } from \"../islands/server-router\";\nimport { fileRoutes } from \"../root/FileRoutes\";\nimport { inlineServerFunctions } from \"../server/middleware\";\nimport { ServerContext } from \"../server/ServerContext\";\nconst rootData = Object.values(/* #__PURE__ */ Object.assign({}))[0];\nconst dataFn = rootData ? rootData.default : undefined;\n\n/** Function responsible for listening for streamed [operations]{@link Operation}. */\n\n/** This composes an array of Exchanges into a single ExchangeIO function */\nexport const composeMiddleware = exchanges => ({\n  forward\n}) => exchanges.reduceRight((forward, exchange) => exchange({\n  forward\n}), forward);\nexport function createHandler(...exchanges) {\n  const exchange = composeMiddleware([apiRoutes, inlineServerFunctions, ...exchanges]);\n  return async event => {\n    return await exchange({\n      forward: async op => {\n        return new Response(null, {\n          status: 404\n        });\n      }\n    })(event);\n  };\n}\nexport function StartRouter(props) {\n  if (false) {\n    return _$createComponent(Router, _$mergeProps(props, {\n      get children() {\n        return _$createComponent(IslandsRouter, _$mergeProps(props, {\n          get children() {\n            return props.children;\n          }\n        }));\n      }\n    }));\n  }\n  return _$createComponent(Router, props);\n}\nconst docType = ssr(\"<!DOCTYPE html>\");\nexport default function StartServer({\n  event\n}) {\n  const parsed = new URL(event.request.url);\n  const path = parsed.pathname + parsed.search;\n\n  // @ts-ignore\n  sharedConfig.context.requestContext = event;\n  return _$createComponent(ServerContext.Provider, {\n    value: event,\n    get children() {\n      return _$createComponent(MetaProvider, {\n        get tags() {\n          return event.tags;\n        },\n        get children() {\n          return _$createComponent(StartRouter, {\n            url: path,\n            get out() {\n              return event.routerContext;\n            },\n            location: path,\n            get prevLocation() {\n              return event.prevUrl;\n            },\n            data: dataFn,\n            routes: fileRoutes,\n            get children() {\n              return [docType, _$createComponent(Root, {})];\n            }\n          });\n        }\n      });\n    }\n  });\n}",
      "start": 1669937513805,
      "end": 1669937513811
    }
  ],
  "virtual": false
}