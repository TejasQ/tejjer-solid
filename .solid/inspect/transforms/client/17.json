{
  "id": "/Users/tejas/Sites/LAB/tejjer/node_modules/.pnpm/@solidjs+meta@0.28.2_solid-js@1.6.2/node_modules/@solidjs/meta/dist/index.jsx",
  "deps": [],
  "plugins": [
    "vite:load-fallback",
    "solid"
  ],
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createContext, createRenderEffect, createUniqueId, onCleanup, sharedConfig, useContext } from \"solid-js\";\nimport { isServer, spread } from \"solid-js/web\";\nexport const MetaContext = createContext();\nconst cascadingTags = [\"title\", \"meta\"];\nconst getTagType = (tag) => tag.tag + (tag.name ? `.${tag.name}\"` : \"\");\nconst MetaProvider = props => {\n    if (!isServer && !sharedConfig.context) {\n        const ssrTags = document.head.querySelectorAll(`[data-sm]`);\n        // `forEach` on `NodeList` is not supported in Googlebot, so use a workaround\n        Array.prototype.forEach.call(ssrTags, (ssrTag) => ssrTag.parentNode.removeChild(ssrTag));\n    }\n    const cascadedTagInstances = new Map();\n    // TODO: use one element for all tags of the same type, just swap out\n    // where the props get applied\n    function getElement(tag) {\n        if (tag.ref) {\n            return tag.ref;\n        }\n        let el = document.querySelector(`[data-sm=\"${tag.id}\"]`);\n        if (el) {\n            if (el.tagName.toLowerCase() !== tag.tag) {\n                if (el.parentNode) {\n                    // remove the old tag\n                    el.parentNode.removeChild(el);\n                }\n                // add the new tag\n                el = document.createElement(tag.tag);\n            }\n            // use the old tag\n            el.removeAttribute(\"data-sm\");\n        }\n        else {\n            // create a new tag\n            el = document.createElement(tag.tag);\n        }\n        return el;\n    }\n    const actions = {\n        addClientTag: (tag) => {\n            let tagType = getTagType(tag);\n            if (cascadingTags.indexOf(tag.tag) !== -1) {\n                //  only cascading tags need to be kept as singletons\n                if (!cascadedTagInstances.has(tagType)) {\n                    cascadedTagInstances.set(tagType, []);\n                }\n                let instances = cascadedTagInstances.get(tagType);\n                let index = instances.length;\n                instances = [...instances, tag];\n                // track indices synchronously\n                cascadedTagInstances.set(tagType, instances);\n                if (!isServer) {\n                    let element = getElement(tag);\n                    tag.ref = element;\n                    spread(element, tag.props);\n                    let lastVisited = null;\n                    for (var i = index - 1; i >= 0; i--) {\n                        if (instances[i] != null) {\n                            lastVisited = instances[i];\n                            break;\n                        }\n                    }\n                    if (element.parentNode != document.head) {\n                        document.head.appendChild(element);\n                    }\n                    if (lastVisited && lastVisited.ref) {\n                        document.head.removeChild(lastVisited.ref);\n                    }\n                }\n                return index;\n            }\n            if (!isServer) {\n                let element = getElement(tag);\n                tag.ref = element;\n                spread(element, tag.props);\n                if (element.parentNode != document.head) {\n                    document.head.appendChild(element);\n                }\n            }\n            return -1;\n        },\n        removeClientTag: (tag, index) => {\n            const tagName = getTagType(tag);\n            if (tag.ref) {\n                const t = cascadedTagInstances.get(tagName);\n                if (t) {\n                    if (tag.ref.parentNode) {\n                        tag.ref.parentNode.removeChild(tag.ref);\n                        for (let i = index - 1; i >= 0; i--) {\n                            if (t[i] != null) {\n                                document.head.appendChild(t[i].ref);\n                            }\n                        }\n                    }\n                    t[index] = null;\n                    cascadedTagInstances.set(tagName, t);\n                }\n                else {\n                    if (tag.ref.parentNode) {\n                        tag.ref.parentNode.removeChild(tag.ref);\n                    }\n                }\n            }\n        }\n    };\n    if (isServer) {\n        actions.addServerTag = (tagDesc) => {\n            const { tags = [] } = props;\n            // tweak only cascading tags\n            if (cascadingTags.indexOf(tagDesc.tag) !== -1) {\n                const index = tags.findIndex(prev => {\n                    const prevName = prev.props.name || prev.props.property;\n                    const nextName = tagDesc.props.name || tagDesc.props.property;\n                    return prev.tag === tagDesc.tag && prevName === nextName;\n                });\n                if (index !== -1) {\n                    tags.splice(index, 1);\n                }\n            }\n            tags.push(tagDesc);\n        };\n        if (Array.isArray(props.tags) === false) {\n            throw Error(\"tags array should be passed to <MetaProvider /> in node\");\n        }\n    }\n    return <MetaContext.Provider value={actions}>{props.children}</MetaContext.Provider>;\n};\nconst MetaTag = (tag, props) => {\n    const id = createUniqueId();\n    const c = useContext(MetaContext);\n    if (!c)\n        throw new Error(\"<MetaProvider /> should be in the tree\");\n    useHead({\n        tag,\n        props,\n        id,\n        get name() {\n            return props.name || props.property;\n        }\n    });\n    return null;\n};\nexport { MetaProvider };\nexport function useHead(tagDesc) {\n    const { addClientTag, removeClientTag, addServerTag } = useContext(MetaContext);\n    createRenderEffect(() => {\n        if (!isServer) {\n            let index = addClientTag(tagDesc);\n            onCleanup(() => removeClientTag(tagDesc, index));\n        }\n    });\n    if (isServer) {\n        addServerTag(tagDesc);\n        return null;\n    }\n}\nexport function renderTags(tags) {\n    return tags\n        .map(tag => {\n        const keys = Object.keys(tag.props);\n        const props = keys.map(k => (k === \"children\" ? \"\" : ` ${k}=\"${tag.props[k]}\"`)).join(\"\");\n        return tag.props.children\n            ? `<${tag.tag} data-sm=\"${tag.id}\"${props}>${\n            // Tags might contain multiple text children:\n            //   <Title>example - {myCompany}</Title>\n            Array.isArray(tag.props.children) ? tag.props.children.join(\"\") : tag.props.children}</${tag.tag}>`\n            : `<${tag.tag} data-sm=\"${tag.id}\"${props}/>`;\n    })\n        .join(\"\");\n}\nexport const Title = props => MetaTag(\"title\", props);\nexport const Style = props => MetaTag(\"style\", props);\nexport const Meta = props => MetaTag(\"meta\", props);\nexport const Link = props => MetaTag(\"link\", props);\nexport const Base = props => MetaTag(\"base\", props);\nexport const Stylesheet = props => <Link rel=\"stylesheet\" {...props}/>;\n",
      "start": 1669937512887,
      "end": 1669937512914
    },
    {
      "name": "solid",
      "result": "import { mergeProps as _$mergeProps } from \"solid-js/web\";\nimport { createComponent as _$createComponent } from \"solid-js/web\";\nimport { createContext, createRenderEffect, createUniqueId, onCleanup, sharedConfig, useContext } from \"solid-js\";\nimport { isServer, spread } from \"solid-js/web\";\nexport const MetaContext = createContext();\nconst cascadingTags = [\"title\", \"meta\"];\nconst getTagType = tag => tag.tag + (tag.name ? `.${tag.name}\"` : \"\");\nconst MetaProvider = props => {\n  if (!isServer && !sharedConfig.context) {\n    const ssrTags = document.head.querySelectorAll(`[data-sm]`);\n    // `forEach` on `NodeList` is not supported in Googlebot, so use a workaround\n    Array.prototype.forEach.call(ssrTags, ssrTag => ssrTag.parentNode.removeChild(ssrTag));\n  }\n  const cascadedTagInstances = new Map();\n  // TODO: use one element for all tags of the same type, just swap out\n  // where the props get applied\n  function getElement(tag) {\n    if (tag.ref) {\n      return tag.ref;\n    }\n    let el = document.querySelector(`[data-sm=\"${tag.id}\"]`);\n    if (el) {\n      if (el.tagName.toLowerCase() !== tag.tag) {\n        if (el.parentNode) {\n          // remove the old tag\n          el.parentNode.removeChild(el);\n        }\n        // add the new tag\n        el = document.createElement(tag.tag);\n      }\n      // use the old tag\n      el.removeAttribute(\"data-sm\");\n    } else {\n      // create a new tag\n      el = document.createElement(tag.tag);\n    }\n    return el;\n  }\n  const actions = {\n    addClientTag: tag => {\n      let tagType = getTagType(tag);\n      if (cascadingTags.indexOf(tag.tag) !== -1) {\n        //  only cascading tags need to be kept as singletons\n        if (!cascadedTagInstances.has(tagType)) {\n          cascadedTagInstances.set(tagType, []);\n        }\n        let instances = cascadedTagInstances.get(tagType);\n        let index = instances.length;\n        instances = [...instances, tag];\n        // track indices synchronously\n        cascadedTagInstances.set(tagType, instances);\n        if (!isServer) {\n          let element = getElement(tag);\n          tag.ref = element;\n          spread(element, tag.props);\n          let lastVisited = null;\n          for (var i = index - 1; i >= 0; i--) {\n            if (instances[i] != null) {\n              lastVisited = instances[i];\n              break;\n            }\n          }\n          if (element.parentNode != document.head) {\n            document.head.appendChild(element);\n          }\n          if (lastVisited && lastVisited.ref) {\n            document.head.removeChild(lastVisited.ref);\n          }\n        }\n        return index;\n      }\n      if (!isServer) {\n        let element = getElement(tag);\n        tag.ref = element;\n        spread(element, tag.props);\n        if (element.parentNode != document.head) {\n          document.head.appendChild(element);\n        }\n      }\n      return -1;\n    },\n    removeClientTag: (tag, index) => {\n      const tagName = getTagType(tag);\n      if (tag.ref) {\n        const t = cascadedTagInstances.get(tagName);\n        if (t) {\n          if (tag.ref.parentNode) {\n            tag.ref.parentNode.removeChild(tag.ref);\n            for (let i = index - 1; i >= 0; i--) {\n              if (t[i] != null) {\n                document.head.appendChild(t[i].ref);\n              }\n            }\n          }\n          t[index] = null;\n          cascadedTagInstances.set(tagName, t);\n        } else {\n          if (tag.ref.parentNode) {\n            tag.ref.parentNode.removeChild(tag.ref);\n          }\n        }\n      }\n    }\n  };\n  if (isServer) {\n    actions.addServerTag = tagDesc => {\n      const {\n        tags = []\n      } = props;\n      // tweak only cascading tags\n      if (cascadingTags.indexOf(tagDesc.tag) !== -1) {\n        const index = tags.findIndex(prev => {\n          const prevName = prev.props.name || prev.props.property;\n          const nextName = tagDesc.props.name || tagDesc.props.property;\n          return prev.tag === tagDesc.tag && prevName === nextName;\n        });\n        if (index !== -1) {\n          tags.splice(index, 1);\n        }\n      }\n      tags.push(tagDesc);\n    };\n    if (Array.isArray(props.tags) === false) {\n      throw Error(\"tags array should be passed to <MetaProvider /> in node\");\n    }\n  }\n  return _$createComponent(MetaContext.Provider, {\n    value: actions,\n    get children() {\n      return props.children;\n    }\n  });\n};\nconst MetaTag = (tag, props) => {\n  const id = createUniqueId();\n  const c = useContext(MetaContext);\n  if (!c) throw new Error(\"<MetaProvider /> should be in the tree\");\n  useHead({\n    tag,\n    props,\n    id,\n    get name() {\n      return props.name || props.property;\n    }\n  });\n  return null;\n};\nexport { MetaProvider };\nexport function useHead(tagDesc) {\n  const {\n    addClientTag,\n    removeClientTag,\n    addServerTag\n  } = useContext(MetaContext);\n  createRenderEffect(() => {\n    if (!isServer) {\n      let index = addClientTag(tagDesc);\n      onCleanup(() => removeClientTag(tagDesc, index));\n    }\n  });\n  if (isServer) {\n    addServerTag(tagDesc);\n    return null;\n  }\n}\nexport function renderTags(tags) {\n  return tags.map(tag => {\n    const keys = Object.keys(tag.props);\n    const props = keys.map(k => k === \"children\" ? \"\" : ` ${k}=\"${tag.props[k]}\"`).join(\"\");\n    return tag.props.children ? `<${tag.tag} data-sm=\"${tag.id}\"${props}>${\n    // Tags might contain multiple text children:\n    //   <Title>example - {myCompany}</Title>\n    Array.isArray(tag.props.children) ? tag.props.children.join(\"\") : tag.props.children}</${tag.tag}>` : `<${tag.tag} data-sm=\"${tag.id}\"${props}/>`;\n  }).join(\"\");\n}\nexport const Title = props => MetaTag(\"title\", props);\nexport const Style = props => MetaTag(\"style\", props);\nexport const Meta = props => MetaTag(\"meta\", props);\nexport const Link = props => MetaTag(\"link\", props);\nexport const Base = props => MetaTag(\"base\", props);\nexport const Stylesheet = props => _$createComponent(Link, _$mergeProps({\n  rel: \"stylesheet\"\n}, props));",
      "start": 1669937512914,
      "end": 1669937512930
    }
  ],
  "virtual": false
}