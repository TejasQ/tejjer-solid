{
  "id": "/Users/tejas/Sites/LAB/tejjer/node_modules/.pnpm/solid-start@0.2.6_i2cnpwj3ojjdnkycik5yjsstli/node_modules/solid-start/root/Document.tsx",
  "deps": [],
  "plugins": [
    "vite:load-fallback",
    "solid",
    "vite:define"
  ],
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import type { JSX } from \"solid-js\";\nimport { children, ComponentProps } from \"solid-js\";\nimport { insert, NoHydration, spread, ssrElement } from \"solid-js/web\";\nimport Links from \"./Links\";\nimport Meta from \"./Meta\";\nimport Scripts from \"./Scripts\";\n\nexport function Html(props: ComponentProps<\"html\">) {\n  if (import.meta.env.START_ISLANDS) {\n    return NoHydration({\n      get children() {\n        return ssrElement(\"html\", props, undefined, false) as unknown as JSX.Element;\n      }\n    });\n  }\n  if (import.meta.env.SSR) {\n    return ssrElement(\"html\", props, undefined, false) as unknown as JSX.Element;\n  }\n  spread(document.documentElement, props, false, true);\n  return props.children;\n}\n\nexport function Head(props: ComponentProps<\"head\">) {\n  if (import.meta.env.SSR) {\n    return ssrElement(\n      \"head\",\n      props,\n      () => (\n        <>\n          {props.children}\n          <Meta />\n          <Links />\n        </>\n      ),\n      false\n    ) as unknown as JSX.Element;\n  } else {\n    spread(document.head, props, false, true);\n    return props.children;\n  }\n}\n\nexport function Body(props: ComponentProps<\"body\">) {\n  if (import.meta.env.SSR) {\n    return ssrElement(\n      \"body\",\n      props,\n      () => (import.meta.env.START_SSR ? props.children : <Scripts />),\n      false\n    ) as unknown as JSX.Element;\n  } else {\n    if (import.meta.env.START_SSR) {\n      let child = children(() => props.children);\n      spread(document.body, props, false, true);\n      insert(\n        document.body,\n        () => {\n          let childNodes = child();\n          if (childNodes) {\n            if (Array.isArray(childNodes)) {\n              let els = childNodes.filter(n => Boolean(n));\n\n              if (!els.length) {\n                return null;\n              }\n\n              return els;\n            }\n            return childNodes;\n          }\n          return null;\n        },\n        null,\n        [...document.body.childNodes]\n      );\n\n      return document.body;\n    } else {\n      spread(document.body, props, false, true);\n      return props.children;\n    }\n  }\n}\n",
      "start": 1669937513025,
      "end": 1669937513104
    },
    {
      "name": "solid",
      "result": "import { createComponent as _$createComponent } from \"solid-js/web\";\nimport { memo as _$memo } from \"solid-js/web\";\nimport { children } from \"solid-js\";\nimport { insert, NoHydration, spread, ssrElement } from \"solid-js/web\";\nimport Links from \"./Links\";\nimport Meta from \"./Meta\";\nimport Scripts from \"./Scripts\";\nexport function Html(props) {\n  if (import.meta.env.START_ISLANDS) {\n    return NoHydration({\n      get children() {\n        return ssrElement(\"html\", props, undefined, false);\n      }\n    });\n  }\n  if (import.meta.env.SSR) {\n    return ssrElement(\"html\", props, undefined, false);\n  }\n  spread(document.documentElement, props, false, true);\n  return props.children;\n}\nexport function Head(props) {\n  if (import.meta.env.SSR) {\n    return ssrElement(\"head\", props, () => [_$memo(() => props.children), _$createComponent(Meta, {}), _$createComponent(Links, {})], false);\n  } else {\n    spread(document.head, props, false, true);\n    return props.children;\n  }\n}\nexport function Body(props) {\n  if (import.meta.env.SSR) {\n    return ssrElement(\"body\", props, () => import.meta.env.START_SSR ? props.children : _$createComponent(Scripts, {}), false);\n  } else {\n    if (import.meta.env.START_SSR) {\n      let child = children(() => props.children);\n      spread(document.body, props, false, true);\n      insert(document.body, () => {\n        let childNodes = child();\n        if (childNodes) {\n          if (Array.isArray(childNodes)) {\n            let els = childNodes.filter(n => Boolean(n));\n            if (!els.length) {\n              return null;\n            }\n            return els;\n          }\n          return childNodes;\n        }\n        return null;\n      }, null, [...document.body.childNodes]);\n      return document.body;\n    } else {\n      spread(document.body, props, false, true);\n      return props.children;\n    }\n  }\n}",
      "start": 1669937513104,
      "end": 1669937513110
    },
    {
      "name": "vite:define",
      "result": "import { createComponent as _$createComponent } from \"solid-js/web\";\nimport { memo as _$memo } from \"solid-js/web\";\nimport { children } from \"solid-js\";\nimport { insert, NoHydration, spread, ssrElement } from \"solid-js/web\";\nimport Links from \"./Links\";\nimport Meta from \"./Meta\";\nimport Scripts from \"./Scripts\";\nexport function Html(props) {\n  if (false) {\n    return NoHydration({\n      get children() {\n        return ssrElement(\"html\", props, undefined, false);\n      }\n    });\n  }\n  if (false) {\n    return ssrElement(\"html\", props, undefined, false);\n  }\n  spread(document.documentElement, props, false, true);\n  return props.children;\n}\nexport function Head(props) {\n  if (false) {\n    return ssrElement(\"head\", props, () => [_$memo(() => props.children), _$createComponent(Meta, {}), _$createComponent(Links, {})], false);\n  } else {\n    spread(document.head, props, false, true);\n    return props.children;\n  }\n}\nexport function Body(props) {\n  if (false) {\n    return ssrElement(\"body\", props, () => true ? props.children : _$createComponent(Scripts, {}), false);\n  } else {\n    if (true) {\n      let child = children(() => props.children);\n      spread(document.body, props, false, true);\n      insert(document.body, () => {\n        let childNodes = child();\n        if (childNodes) {\n          if (Array.isArray(childNodes)) {\n            let els = childNodes.filter(n => Boolean(n));\n            if (!els.length) {\n              return null;\n            }\n            return els;\n          }\n          return childNodes;\n        }\n        return null;\n      }, null, [...document.body.childNodes]);\n      return document.body;\n    } else {\n      spread(document.body, props, false, true);\n      return props.children;\n    }\n  }\n}",
      "start": 1669937513110,
      "end": 1669937513110
    }
  ],
  "virtual": false
}