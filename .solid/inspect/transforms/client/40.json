{
  "id": "/Users/tejas/Sites/LAB/tejjer/node_modules/.pnpm/solid-start@0.2.6_i2cnpwj3ojjdnkycik5yjsstli/node_modules/solid-start/islands/index.tsx",
  "deps": [],
  "plugins": [
    "vite:load-fallback",
    "solid",
    "vite:define"
  ],
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { Component, ComponentProps, lazy, splitProps, useContext } from \"solid-js\";\nimport { Hydration, NoHydration } from \"solid-js/web\";\nimport { ServerContext } from \"../server/ServerContext\";\nimport { IslandManifest } from \"../server/types\";\nexport { default as clientOnly } from \"./clientOnly\";\n\ndeclare module \"solid-js\" {\n  namespace JSX {\n    interface IntrinsicElements {\n      \"solid-island\": {\n        \"data-props\": string;\n        \"data-component\": string;\n        \"data-island\": string;\n        \"data-when\": \"idle\" | \"load\";\n        children: JSX.Element;\n      };\n      \"solid-children\": {\n        children: JSX.Element;\n      };\n    }\n  }\n}\n\nexport function island<T extends Component<any>>(\n  Comp:\n    | T\n    | (() => Promise<{\n        default: T;\n      }>),\n  path?: string\n): T {\n  let Component = Comp as T;\n\n  if (!import.meta.env.START_ISLANDS) {\n    // TODO: have some sane semantics for islands used in non-island mode\n    return lazy(Comp as () => Promise<{ default: T }>);\n  }\n\n  function IslandComponent(props: ComponentProps<any>) {\n    return (\n      <Component {...props}>\n        <solid-children>\n          <NoHydration>{props.children}</NoHydration>\n        </solid-children>\n      </Component>\n    );\n  }\n\n  return ((compProps: ComponentProps<T>) => {\n    if (import.meta.env.SSR) {\n      const context = useContext(ServerContext);\n      const [, props] = splitProps(compProps, [\"children\"]);\n\n      let fpath;\n\n      if (import.meta.env.PROD && context && context.env.manifest && path && path in context.env.manifest) {\n        fpath = (context.env.manifest[path] as IslandManifest).script.href;\n      } else {\n        fpath = `/` + path;\n      }\n\n      return (\n        <Hydration>\n          <solid-island\n            data-props={JSON.stringify(props)}\n            data-component={fpath}\n            data-island={`/` + path}\n            data-when={props[\"client:idle\"] ? \"idle\" : \"load\"}\n          >\n            <IslandComponent {...compProps} />\n          </solid-island>\n        </Hydration>\n      );\n    } else {\n      return <IslandComponent />;\n    }\n  }) as T;\n}\n",
      "start": 1669937512960,
      "end": 1669937513025
    },
    {
      "name": "solid",
      "result": "import { template as _$template } from \"solid-js/web\";\nimport { effect as _$effect } from \"solid-js/web\";\nimport { mergeProps as _$mergeProps } from \"solid-js/web\";\nimport { getNextElement as _$getNextElement } from \"solid-js/web\";\nimport { insert as _$insert } from \"solid-js/web\";\nimport { createComponent as _$createComponent } from \"solid-js/web\";\nimport { getOwner as _$getOwner } from \"solid-js/web\";\nconst _tmpl$ = /*#__PURE__*/_$template(`<solid-children></solid-children>`, 2),\n  _tmpl$2 = /*#__PURE__*/_$template(`<solid-island></solid-island>`, 2);\nimport { lazy, splitProps, useContext } from \"solid-js\";\nimport { Hydration, NoHydration } from \"solid-js/web\";\nimport { ServerContext } from \"../server/ServerContext\";\nexport { default as clientOnly } from \"./clientOnly\";\nexport function island(Comp, path) {\n  let Component = Comp;\n  if (!import.meta.env.START_ISLANDS) {\n    // TODO: have some sane semantics for islands used in non-island mode\n    return lazy(Comp);\n  }\n  function IslandComponent(props) {\n    return _$createComponent(Component, _$mergeProps(props, {\n      get children() {\n        const _el$ = _$getNextElement(_tmpl$);\n        _el$._$owner = _$getOwner();\n        _$insert(_el$, _$createComponent(NoHydration, {\n          get children() {\n            return props.children;\n          }\n        }));\n        return _el$;\n      }\n    }));\n  }\n  return compProps => {\n    if (import.meta.env.SSR) {\n      const context = useContext(ServerContext);\n      const [, props] = splitProps(compProps, [\"children\"]);\n      let fpath;\n      if (import.meta.env.PROD && context && context.env.manifest && path && path in context.env.manifest) {\n        fpath = context.env.manifest[path].script.href;\n      } else {\n        fpath = `/` + path;\n      }\n      return _$createComponent(Hydration, {\n        get children() {\n          const _el$2 = _$getNextElement(_tmpl$2);\n          _el$2.dataComponent = fpath;\n          _el$2.dataIsland = `/` + path;\n          _el$2._$owner = _$getOwner();\n          _$insert(_el$2, _$createComponent(IslandComponent, compProps));\n          _$effect(_p$ => {\n            const _v$ = JSON.stringify(props),\n              _v$2 = props[\"client:idle\"] ? \"idle\" : \"load\";\n            _v$ !== _p$._v$ && (_el$2.dataProps = _p$._v$ = _v$);\n            _v$2 !== _p$._v$2 && (_el$2.dataWhen = _p$._v$2 = _v$2);\n            return _p$;\n          }, {\n            _v$: undefined,\n            _v$2: undefined\n          });\n          return _el$2;\n        }\n      });\n    } else {\n      return _$createComponent(IslandComponent, {});\n    }\n  };\n}",
      "start": 1669937513025,
      "end": 1669937513035
    },
    {
      "name": "vite:define",
      "result": "import { template as _$template } from \"solid-js/web\";\nimport { effect as _$effect } from \"solid-js/web\";\nimport { mergeProps as _$mergeProps } from \"solid-js/web\";\nimport { getNextElement as _$getNextElement } from \"solid-js/web\";\nimport { insert as _$insert } from \"solid-js/web\";\nimport { createComponent as _$createComponent } from \"solid-js/web\";\nimport { getOwner as _$getOwner } from \"solid-js/web\";\nconst _tmpl$ = /*#__PURE__*/_$template(`<solid-children></solid-children>`, 2),\n  _tmpl$2 = /*#__PURE__*/_$template(`<solid-island></solid-island>`, 2);\nimport { lazy, splitProps, useContext } from \"solid-js\";\nimport { Hydration, NoHydration } from \"solid-js/web\";\nimport { ServerContext } from \"../server/ServerContext\";\nexport { default as clientOnly } from \"./clientOnly\";\nexport function island(Comp, path) {\n  let Component = Comp;\n  if (!false) {\n    // TODO: have some sane semantics for islands used in non-island mode\n    return lazy(Comp);\n  }\n  function IslandComponent(props) {\n    return _$createComponent(Component, _$mergeProps(props, {\n      get children() {\n        const _el$ = _$getNextElement(_tmpl$);\n        _el$._$owner = _$getOwner();\n        _$insert(_el$, _$createComponent(NoHydration, {\n          get children() {\n            return props.children;\n          }\n        }));\n        return _el$;\n      }\n    }));\n  }\n  return compProps => {\n    if (false) {\n      const context = useContext(ServerContext);\n      const [, props] = splitProps(compProps, [\"children\"]);\n      let fpath;\n      if (true && context && context.env.manifest && path && path in context.env.manifest) {\n        fpath = context.env.manifest[path].script.href;\n      } else {\n        fpath = `/` + path;\n      }\n      return _$createComponent(Hydration, {\n        get children() {\n          const _el$2 = _$getNextElement(_tmpl$2);\n          _el$2.dataComponent = fpath;\n          _el$2.dataIsland = `/` + path;\n          _el$2._$owner = _$getOwner();\n          _$insert(_el$2, _$createComponent(IslandComponent, compProps));\n          _$effect(_p$ => {\n            const _v$ = JSON.stringify(props),\n              _v$2 = props[\"client:idle\"] ? \"idle\" : \"load\";\n            _v$ !== _p$._v$ && (_el$2.dataProps = _p$._v$ = _v$);\n            _v$2 !== _p$._v$2 && (_el$2.dataWhen = _p$._v$2 = _v$2);\n            return _p$;\n          }, {\n            _v$: undefined,\n            _v$2: undefined\n          });\n          return _el$2;\n        }\n      });\n    } else {\n      return _$createComponent(IslandComponent, {});\n    }\n  };\n}",
      "start": 1669937513035,
      "end": 1669937513035
    }
  ],
  "virtual": false
}