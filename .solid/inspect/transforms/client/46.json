{
  "id": "/Users/tejas/Sites/LAB/tejjer/node_modules/.pnpm/solid-start@0.2.6_i2cnpwj3ojjdnkycik5yjsstli/node_modules/solid-start/root/Links.tsx",
  "deps": [],
  "plugins": [
    "vite:load-fallback",
    "solid",
    "vite:define"
  ],
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { JSXElement, useContext } from \"solid-js\";\nimport { useAssets } from \"solid-js/web\";\nimport { ServerContext } from \"../server/ServerContext\";\nimport type { IslandManifest, ManifestEntry, PageEvent } from \"../server/types\";\nimport { routeLayouts } from \"./InlineStyles\";\n\ntype NotUndefined<T> = T extends undefined ? never : T;\n\ntype RouterContext = NotUndefined<PageEvent[\"routerContext\"]>\n\nfunction flattenIslands(match: ManifestEntry[], manifest: Record<string, ManifestEntry> | IslandManifest) {\n  let result = [...match];\n  match.forEach(m => {\n    if (m.type !== \"island\") return;\n    const islandManifest = manifest[m.href as keyof typeof manifest] as unknown as IslandManifest | undefined;\n    if (islandManifest) {\n      const res = flattenIslands((islandManifest as IslandManifest).assets, manifest);\n      result.push(...res);\n    }\n  });\n  return result;\n}\n\nfunction getAssetsFromManifest(\n  manifest: PageEvent[\"env\"][\"manifest\"],\n  routerContext: RouterContext\n) {\n  let match = routerContext.matches ? routerContext.matches.reduce<ManifestEntry[]>((memo, m) => {\n    if (m.length) {\n      const fullPath = m.reduce((previous, match) => previous + match.originalPath, \"\");\n      const route = routeLayouts[fullPath];\n      if (route) {\n        memo.push(...((manifest![route.id] || []) as ManifestEntry[]));\n        const layoutsManifestEntries = route.layouts.flatMap(\n          manifestKey => (manifest![manifestKey as keyof typeof manifest] || []) as ManifestEntry[]\n        );\n        memo.push(...layoutsManifestEntries);\n      }\n    }\n    return memo;\n  }, []) : [];\n\n  match.push(...((manifest![\"entry-client\"] || []) as ManifestEntry[]));\n\n  match = manifest ? flattenIslands(match, manifest as any) : [];\n\n  const links = match.reduce((r, src) => {\n    r[src.href] =\n      src.type === \"style\" ? (\n        <link rel=\"stylesheet\" href={src.href} $ServerOnly />\n      ) : src.type === \"script\" ? (\n        <link rel=\"modulepreload\" href={src.href} $ServerOnly />\n      ) : undefined;\n    return r;\n  }, {} as Record<string, JSXElement>);\n\n  return Object.values(links);\n}\n\n/**\n * Links are used to load assets for the server rendered HTML\n * @returns {JSXElement}\n */\nexport default function Links() {\n  const isDev = import.meta.env.MODE === \"development\";\n  const context = useContext(ServerContext);\n  !isDev &&\n    import.meta.env.START_SSR &&\n    useAssets(() => getAssetsFromManifest(context!.env.manifest, context!.routerContext!));\n  return null;\n}\n",
      "start": 1669937513025,
      "end": 1669937513095
    },
    {
      "name": "solid",
      "result": "import { setAttribute as _$setAttribute } from \"solid-js/web\";\nimport { effect as _$effect } from \"solid-js/web\";\nimport { getNextElement as _$getNextElement } from \"solid-js/web\";\nimport { useContext } from \"solid-js\";\nimport { useAssets } from \"solid-js/web\";\nimport { ServerContext } from \"../server/ServerContext\";\nimport { routeLayouts } from \"./InlineStyles\";\nfunction flattenIslands(match, manifest) {\n  let result = [...match];\n  match.forEach(m => {\n    if (m.type !== \"island\") return;\n    const islandManifest = manifest[m.href];\n    if (islandManifest) {\n      const res = flattenIslands(islandManifest.assets, manifest);\n      result.push(...res);\n    }\n  });\n  return result;\n}\nfunction getAssetsFromManifest(manifest, routerContext) {\n  let match = routerContext.matches ? routerContext.matches.reduce((memo, m) => {\n    if (m.length) {\n      const fullPath = m.reduce((previous, match) => previous + match.originalPath, \"\");\n      const route = routeLayouts[fullPath];\n      if (route) {\n        memo.push(...(manifest[route.id] || []));\n        const layoutsManifestEntries = route.layouts.flatMap(manifestKey => manifest[manifestKey] || []);\n        memo.push(...layoutsManifestEntries);\n      }\n    }\n    return memo;\n  }, []) : [];\n  match.push(...(manifest[\"entry-client\"] || []));\n  match = manifest ? flattenIslands(match, manifest) : [];\n  const links = match.reduce((r, src) => {\n    r[src.href] = src.type === \"style\" ? (() => {\n      const _el$ = _$getNextElement();\n      _$effect(() => _$setAttribute(_el$, \"href\", src.href));\n      return _el$;\n    })() : src.type === \"script\" ? (() => {\n      const _el$2 = _$getNextElement();\n      _$effect(() => _$setAttribute(_el$2, \"href\", src.href));\n      return _el$2;\n    })() : undefined;\n    return r;\n  }, {});\n  return Object.values(links);\n}\n\n/**\n * Links are used to load assets for the server rendered HTML\n * @returns {JSXElement}\n */\nexport default function Links() {\n  const isDev = import.meta.env.MODE === \"development\";\n  const context = useContext(ServerContext);\n  !isDev && import.meta.env.START_SSR && useAssets(() => getAssetsFromManifest(context.env.manifest, context.routerContext));\n  return null;\n}",
      "start": 1669937513095,
      "end": 1669937513103
    },
    {
      "name": "vite:define",
      "result": "import { setAttribute as _$setAttribute } from \"solid-js/web\";\nimport { effect as _$effect } from \"solid-js/web\";\nimport { getNextElement as _$getNextElement } from \"solid-js/web\";\nimport { useContext } from \"solid-js\";\nimport { useAssets } from \"solid-js/web\";\nimport { ServerContext } from \"../server/ServerContext\";\nimport { routeLayouts } from \"./InlineStyles\";\nfunction flattenIslands(match, manifest) {\n  let result = [...match];\n  match.forEach(m => {\n    if (m.type !== \"island\") return;\n    const islandManifest = manifest[m.href];\n    if (islandManifest) {\n      const res = flattenIslands(islandManifest.assets, manifest);\n      result.push(...res);\n    }\n  });\n  return result;\n}\nfunction getAssetsFromManifest(manifest, routerContext) {\n  let match = routerContext.matches ? routerContext.matches.reduce((memo, m) => {\n    if (m.length) {\n      const fullPath = m.reduce((previous, match) => previous + match.originalPath, \"\");\n      const route = routeLayouts[fullPath];\n      if (route) {\n        memo.push(...(manifest[route.id] || []));\n        const layoutsManifestEntries = route.layouts.flatMap(manifestKey => manifest[manifestKey] || []);\n        memo.push(...layoutsManifestEntries);\n      }\n    }\n    return memo;\n  }, []) : [];\n  match.push(...(manifest[\"entry-client\"] || []));\n  match = manifest ? flattenIslands(match, manifest) : [];\n  const links = match.reduce((r, src) => {\n    r[src.href] = src.type === \"style\" ? (() => {\n      const _el$ = _$getNextElement();\n      _$effect(() => _$setAttribute(_el$, \"href\", src.href));\n      return _el$;\n    })() : src.type === \"script\" ? (() => {\n      const _el$2 = _$getNextElement();\n      _$effect(() => _$setAttribute(_el$2, \"href\", src.href));\n      return _el$2;\n    })() : undefined;\n    return r;\n  }, {});\n  return Object.values(links);\n}\n\n/**\n * Links are used to load assets for the server rendered HTML\n * @returns {JSXElement}\n */\nexport default function Links() {\n  const isDev = \"production\" === \"development\";\n  const context = useContext(ServerContext);\n  !isDev && true && useAssets(() => getAssetsFromManifest(context.env.manifest, context.routerContext));\n  return null;\n}",
      "start": 1669937513103,
      "end": 1669937513103
    }
  ],
  "virtual": false
}