{
  "id": "/Users/tejas/Sites/LAB/tejjer/node_modules/.pnpm/solid-start@0.2.6_i2cnpwj3ojjdnkycik5yjsstli/node_modules/solid-start/server/responses.ts",
  "deps": [],
  "plugins": [
    "vite:load-fallback",
    "vite:esbuild",
    "vite:define"
  ],
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "export const XSolidStartStatusCodeHeader = \"x-solidstart-status-code\";\nexport const XSolidStartLocationHeader = \"x-solidstart-location\";\nexport const LocationHeader = \"Location\";\nexport const ContentTypeHeader = \"content-type\";\nexport const XSolidStartResponseTypeHeader = \"x-solidstart-response-type\";\nexport const XSolidStartContentTypeHeader = \"x-solidstart-content-type\";\nexport const XSolidStartOrigin = \"x-solidstart-origin\";\nexport const JSONResponseType = \"application/json\";\n\n/**\n * A JSON response. Converts `data` to JSON and sets the `Content-Type` header.\n */\nexport function json<Data>(data: Data, init: number | ResponseInit = {}): Response {\n  let responseInit: any = init;\n  if (typeof init === \"number\") {\n    responseInit = { status: init };\n  }\n\n  let headers = new Headers(responseInit.headers);\n\n  if (!headers.has(ContentTypeHeader)) {\n    headers.set(ContentTypeHeader, \"application/json; charset=utf-8\");\n  }\n\n  const response = new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers\n  });\n\n  return response;\n}\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport function redirect(url: string, init: number | ResponseInit = 302): Response {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  if (url === \"\") {\n    url = \"/\";\n  }\n\n  if (process.env.NODE_ENV === \"development\") {\n    if (url.startsWith(\".\")) {\n      throw new Error(\"Relative URLs are not allowed in redirect\");\n    }\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(LocationHeader, url);\n\n  const response = new Response(null, {\n    ...responseInit,\n    headers: headers\n  });\n\n  return response;\n}\n\nexport function eventStream(\n  request: Request,\n  init: (send: (event: string, data: any) => void) => () => void\n) {\n  let stream = new ReadableStream({\n    start(controller) {\n      let encoder = new TextEncoder();\n      let send = (event: string, data: any) => {\n        controller.enqueue(encoder.encode(\"event: \" + event + \"\\n\"));\n        controller.enqueue(encoder.encode(\"data: \" + data + \"\\n\" + \"\\n\"));\n      };\n      let cleanup = init(send);\n      let closed = false;\n      let close = () => {\n        if (closed) return;\n        cleanup();\n        closed = true;\n        request.signal.removeEventListener(\"abort\", close);\n        controller.close();\n      };\n      request.signal.addEventListener(\"abort\", close);\n      if (request.signal.aborted) {\n        close();\n        return;\n      }\n    }\n  });\n  return new Response(stream, {\n    headers: { \"Content-Type\": \"text/event-stream\" }\n  });\n}\n\nexport function isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nconst redirectStatusCodes = new Set([204, 301, 302, 303, 307, 308]);\n\nexport function isRedirectResponse(response: Response | any): response is Response {\n  return response && response instanceof Response && redirectStatusCodes.has(response.status);\n}\n\nexport class ResponseError extends Error implements Response {\n  status: number;\n  headers: Headers;\n  name = \"ResponseError\";\n  ok: boolean;\n  statusText: string;\n  redirected: boolean;\n  url: string;\n  constructor(response: Response) {\n    let message = JSON.stringify({\n      $type: \"response\",\n      status: response.status,\n      message: response.statusText,\n      headers: [...response.headers.entries()]\n    });\n    super(message);\n    this.status = response.status;\n    this.headers = new Map([...response.headers.entries()]) as any as Headers;\n    this.url = response.url;\n    this.ok = response.ok;\n    this.statusText = response.statusText;\n    this.redirected = response.redirected;\n    this.bodyUsed = false;\n    this.type = response.type;\n    this.response = () => response;\n  }\n\n  response: () => Response;\n  type: ResponseType;\n  clone(): Response {\n    return this.response();\n  }\n  get body(): ReadableStream<Uint8Array> {\n    return this.response().body!;\n  }\n  bodyUsed: boolean;\n  async arrayBuffer(): Promise<ArrayBuffer> {\n    return await this.response().arrayBuffer();\n  }\n  async blob(): Promise<Blob> {\n    return await this.response().blob();\n  }\n  async formData(): Promise<FormData> {\n    return await this.response().formData();\n  }\n\n  async text() {\n    return await this.response().text();\n  }\n\n  async json() {\n    return await this.response().json();\n  }\n}\n",
      "start": 1669937512960,
      "end": 1669937513063
    },
    {
      "name": "vite:esbuild",
      "result": "export const XSolidStartStatusCodeHeader = \"x-solidstart-status-code\";\nexport const XSolidStartLocationHeader = \"x-solidstart-location\";\nexport const LocationHeader = \"Location\";\nexport const ContentTypeHeader = \"content-type\";\nexport const XSolidStartResponseTypeHeader = \"x-solidstart-response-type\";\nexport const XSolidStartContentTypeHeader = \"x-solidstart-content-type\";\nexport const XSolidStartOrigin = \"x-solidstart-origin\";\nexport const JSONResponseType = \"application/json\";\nexport function json(data, init = {}) {\n  let responseInit = init;\n  if (typeof init === \"number\") {\n    responseInit = { status: init };\n  }\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(ContentTypeHeader)) {\n    headers.set(ContentTypeHeader, \"application/json; charset=utf-8\");\n  }\n  const response = new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers\n  });\n  return response;\n}\nexport function redirect(url, init = 302) {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  if (url === \"\") {\n    url = \"/\";\n  }\n  if (process.env.NODE_ENV === \"development\") {\n    if (url.startsWith(\".\")) {\n      throw new Error(\"Relative URLs are not allowed in redirect\");\n    }\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set(LocationHeader, url);\n  const response = new Response(null, {\n    ...responseInit,\n    headers\n  });\n  return response;\n}\nexport function eventStream(request, init) {\n  let stream = new ReadableStream({\n    start(controller) {\n      let encoder = new TextEncoder();\n      let send = (event, data) => {\n        controller.enqueue(encoder.encode(\"event: \" + event + \"\\n\"));\n        controller.enqueue(encoder.encode(\"data: \" + data + \"\\n\\n\"));\n      };\n      let cleanup = init(send);\n      let closed = false;\n      let close = () => {\n        if (closed)\n          return;\n        cleanup();\n        closed = true;\n        request.signal.removeEventListener(\"abort\", close);\n        controller.close();\n      };\n      request.signal.addEventListener(\"abort\", close);\n      if (request.signal.aborted) {\n        close();\n        return;\n      }\n    }\n  });\n  return new Response(stream, {\n    headers: { \"Content-Type\": \"text/event-stream\" }\n  });\n}\nexport function isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nconst redirectStatusCodes = /* @__PURE__ */ new Set([204, 301, 302, 303, 307, 308]);\nexport function isRedirectResponse(response) {\n  return response && response instanceof Response && redirectStatusCodes.has(response.status);\n}\nexport class ResponseError extends Error {\n  status;\n  headers;\n  name = \"ResponseError\";\n  ok;\n  statusText;\n  redirected;\n  url;\n  constructor(response) {\n    let message = JSON.stringify({\n      $type: \"response\",\n      status: response.status,\n      message: response.statusText,\n      headers: [...response.headers.entries()]\n    });\n    super(message);\n    this.status = response.status;\n    this.headers = new Map([...response.headers.entries()]);\n    this.url = response.url;\n    this.ok = response.ok;\n    this.statusText = response.statusText;\n    this.redirected = response.redirected;\n    this.bodyUsed = false;\n    this.type = response.type;\n    this.response = () => response;\n  }\n  response;\n  type;\n  clone() {\n    return this.response();\n  }\n  get body() {\n    return this.response().body;\n  }\n  bodyUsed;\n  async arrayBuffer() {\n    return await this.response().arrayBuffer();\n  }\n  async blob() {\n    return await this.response().blob();\n  }\n  async formData() {\n    return await this.response().formData();\n  }\n  async text() {\n    return await this.response().text();\n  }\n  async json() {\n    return await this.response().json();\n  }\n}\n",
      "start": 1669937513063,
      "end": 1669937513075
    },
    {
      "name": "vite:define",
      "result": "export const XSolidStartStatusCodeHeader = \"x-solidstart-status-code\";\nexport const XSolidStartLocationHeader = \"x-solidstart-location\";\nexport const LocationHeader = \"Location\";\nexport const ContentTypeHeader = \"content-type\";\nexport const XSolidStartResponseTypeHeader = \"x-solidstart-response-type\";\nexport const XSolidStartContentTypeHeader = \"x-solidstart-content-type\";\nexport const XSolidStartOrigin = \"x-solidstart-origin\";\nexport const JSONResponseType = \"application/json\";\nexport function json(data, init = {}) {\n  let responseInit = init;\n  if (typeof init === \"number\") {\n    responseInit = { status: init };\n  }\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(ContentTypeHeader)) {\n    headers.set(ContentTypeHeader, \"application/json; charset=utf-8\");\n  }\n  const response = new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers\n  });\n  return response;\n}\nexport function redirect(url, init = 302) {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  if (url === \"\") {\n    url = \"/\";\n  }\n  if (\"production\" === \"development\") {\n    if (url.startsWith(\".\")) {\n      throw new Error(\"Relative URLs are not allowed in redirect\");\n    }\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set(LocationHeader, url);\n  const response = new Response(null, {\n    ...responseInit,\n    headers\n  });\n  return response;\n}\nexport function eventStream(request, init) {\n  let stream = new ReadableStream({\n    start(controller) {\n      let encoder = new TextEncoder();\n      let send = (event, data) => {\n        controller.enqueue(encoder.encode(\"event: \" + event + \"\\n\"));\n        controller.enqueue(encoder.encode(\"data: \" + data + \"\\n\\n\"));\n      };\n      let cleanup = init(send);\n      let closed = false;\n      let close = () => {\n        if (closed)\n          return;\n        cleanup();\n        closed = true;\n        request.signal.removeEventListener(\"abort\", close);\n        controller.close();\n      };\n      request.signal.addEventListener(\"abort\", close);\n      if (request.signal.aborted) {\n        close();\n        return;\n      }\n    }\n  });\n  return new Response(stream, {\n    headers: { \"Content-Type\": \"text/event-stream\" }\n  });\n}\nexport function isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nconst redirectStatusCodes = /* @__PURE__ */ new Set([204, 301, 302, 303, 307, 308]);\nexport function isRedirectResponse(response) {\n  return response && response instanceof Response && redirectStatusCodes.has(response.status);\n}\nexport class ResponseError extends Error {\n  status;\n  headers;\n  name = \"ResponseError\";\n  ok;\n  statusText;\n  redirected;\n  url;\n  constructor(response) {\n    let message = JSON.stringify({\n      $type: \"response\",\n      status: response.status,\n      message: response.statusText,\n      headers: [...response.headers.entries()]\n    });\n    super(message);\n    this.status = response.status;\n    this.headers = new Map([...response.headers.entries()]);\n    this.url = response.url;\n    this.ok = response.ok;\n    this.statusText = response.statusText;\n    this.redirected = response.redirected;\n    this.bodyUsed = false;\n    this.type = response.type;\n    this.response = () => response;\n  }\n  response;\n  type;\n  clone() {\n    return this.response();\n  }\n  get body() {\n    return this.response().body;\n  }\n  bodyUsed;\n  async arrayBuffer() {\n    return await this.response().arrayBuffer();\n  }\n  async blob() {\n    return await this.response().blob();\n  }\n  async formData() {\n    return await this.response().formData();\n  }\n  async text() {\n    return await this.response().text();\n  }\n  async json() {\n    return await this.response().json();\n  }\n}\n",
      "start": 1669937513075,
      "end": 1669937513075
    }
  ],
  "virtual": false
}